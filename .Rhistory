require(jl4R)
.jlBegin()
q()
require(jl4R)
.jlBegin()
.jlRunning()
q()
require(jl4R)
.jlRunning()
.jlBegin()
.jl("a=1")
.jl("a=[1]")
.jl('a=["1"]')
q()
require(jl4R)
.jlBegin()
.jl('a=["1"]')
.jl('a=["1",1]')
q()
require(jl4R)
.jlBegin()
.jl('a=["1",1]')
.jl('a=[2,1]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
list(1,2,3)
as.vector(list(1,2,3))
unlist(list(1,2,3))
unlist(list(1,"2",3))
sapply(list(1,"2",3),is.integer)
is.integer(list(1,"2",3))
sapply(list(1,"2",3),is.integer)
sapply(list(1,"2",3),is.numeric)
all(sapply(list(1,"2",3),is.numeric))
all.equal(sapply(list(1,"2",3),class)
)
all.equal(sapply(list(1,"2",3),class))
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
.jl('a=[2,"1"]')
.jl('a=["2","1"]')
q()
require(jl4R)
.jlBegin()
.jl('a=["2","1"]')
q()
require(jl4R)
.jlBegin()
.jl('a=["2","1"]')
q()
require(jl4R)
.jlBegin()
.jl('a=["2","1"]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2,1]')
.jl('a=[2.,1.]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2.,1.]')
.jl('a=[2.,1.]') -> a
a
is.integer(a)
is.double(a)
is.real(a)
q()
require(jl4R)
.jlBegin()
.jl('a=["2","1"]')
q()
require(jl4R)
.jlBegin()
.jl('a=[2im,1im]')
.jl('a=[2.im,1.im]')
.jl('a=[1+2.im,1.im]')
q()
require(jl4R)
.jlBegin()
.jl('a=[1+2.im,1.im]')
.jl('a=[1+2im,1im]')
.jl('a=[1+2im,1im]') -> a
im(a)
imag(a)
im(a)
re(a)
class(a)
methods(complex)
a.im
a$im
Im(a)
is.integer(Im(a))
is.numeric(Im(a))
q()
require(jl4R)
.jlBegin()
.jl('a=1+2im')
require(jl4R)
.jlBegin()
.jl('a=1+2im')
.jl('a=1+2.im')
.jl('a')
.jl('"a"')
.jl('a="a"')
.jl('a=typeof("a")')
.jl('a=typeof("â")')
.jl('a="â"')
.jl('using RDatasets')
.jl('iris=data("datasets","iris"')
.jl('iris=data("datasets","iris")')
.jl('iris')
q()
require(jl4R)
.jlBegin()
.jl('using RDatasets')
.jl('iris=data("datasets","iris")')
.jl('vector(iris[1])')
q()
require(jl4R)
.jl('vector(iris[1])')
.jl('[1,"2"]')
.jl('[1,"2",TRUE]')
.jl('[TRUE]')
.jl('TRUE')
q()
require(jl4R)
.jl('TRUE')
.jl('[TRUE]')
q()
require(jl4R)
.jl('[TRUE]')
q()
require(jl4R)
.jl('[TRUE]')
.jl('true')
.jl('false')
.jl('[false]')
.jl('[false,true]')
.jl('[false,1]')
.jl('[1.,1]')
q()
